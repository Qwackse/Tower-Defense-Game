window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "main.FPS", "modulename": "main", "qualname": "FPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "main.fpsClock", "modulename": "main", "qualname": "fpsClock", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Clock(fps=0.00)&gt;"}, {"fullname": "main.window_width", "modulename": "main", "qualname": "window_width", "kind": "variable", "doc": "<p></p>\n", "default_value": "800"}, {"fullname": "main.window_height", "modulename": "main", "qualname": "window_height", "kind": "variable", "doc": "<p></p>\n", "default_value": "600"}, {"fullname": "main.sound_volume", "modulename": "main", "qualname": "sound_volume", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "main.bgm_volume", "modulename": "main", "qualname": "bgm_volume", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "main.window", "modulename": "main", "qualname": "window", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Surface(800x600x32 SW)&gt;"}, {"fullname": "main.bg", "modulename": "main", "qualname": "bg", "kind": "variable", "doc": "<p></p>\n", "default_value": "(204, 102, 0)"}, {"fullname": "main.red", "modulename": "main", "qualname": "red", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 0, 0)"}, {"fullname": "main.black", "modulename": "main", "qualname": "black", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0, 0)"}, {"fullname": "main.white", "modulename": "main", "qualname": "white", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 255, 255)"}, {"fullname": "main.green", "modulename": "main", "qualname": "green", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 180, 0)"}, {"fullname": "main.grey", "modulename": "main", "qualname": "grey", "kind": "variable", "doc": "<p></p>\n", "default_value": "(100, 100, 100)"}, {"fullname": "main.StartScreen", "modulename": "main", "qualname": "StartScreen", "kind": "class", "doc": "<p>A class to represent the start screen of the Tower Defense Game.\nAttributes:</p>\n\n<p>Attributes:\nwindow: The window surface where the start screen will be rendered.\nbackground: The background image of the start screen.\nfont: The font used for rendering text on the start screen.\ntitle_text: The rendered text surface for the game title.\nstart_text: The rendered text surface for the start button.\nstart_button_rect: The rectangle area of the start button.</p>\n\n<p>Methods:\nrender(): Renders the start screen with the background, title, and\nstart button.\ncheck_for_click(): Checks for mouse click events and returns True if the\nstart button is clicked.</p>\n"}, {"fullname": "main.StartScreen.__init__", "modulename": "main", "qualname": "StartScreen.__init__", "kind": "function", "doc": "<p>Initializes the main game window and loads the start screen assets.\nArgs:\n    window: The window surface where the start screen will be rendered.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">window</span></span>)</span>"}, {"fullname": "main.StartScreen.window", "modulename": "main", "qualname": "StartScreen.window", "kind": "variable", "doc": "<p>The pygame window to be used.</p>\n"}, {"fullname": "main.StartScreen.background", "modulename": "main", "qualname": "StartScreen.background", "kind": "variable", "doc": "<p>The background image of the start screen.</p>\n"}, {"fullname": "main.StartScreen.font", "modulename": "main", "qualname": "StartScreen.font", "kind": "variable", "doc": "<p>The font used for rendering text on the start screen.</p>\n"}, {"fullname": "main.StartScreen.start_button_rect", "modulename": "main", "qualname": "StartScreen.start_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the start button.</p>\n"}, {"fullname": "main.StartScreen.render", "modulename": "main", "qualname": "StartScreen.render", "kind": "function", "doc": "<p>Renders the start screen with the background, title, and start button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.StartScreen.check_for_click", "modulename": "main", "qualname": "StartScreen.check_for_click", "kind": "function", "doc": "<p>Checks for mouse click events and returns True if the start button\nis clicked.</p>\n\n<p>Returns:\n    bool: True if the start button is clicked, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.Stage_Select_Screen", "modulename": "main", "qualname": "Stage_Select_Screen", "kind": "class", "doc": "<p>Class for the stage selection screen. Allows the player to select a\nstage and difficulty level.</p>\n"}, {"fullname": "main.Stage_Select_Screen.__init__", "modulename": "main", "qualname": "Stage_Select_Screen.__init__", "kind": "function", "doc": "<p>Initializes the stage selection screen with the window and loads\nthe background image and font.</p>\n\n<p>Args:\n    window (pygame.Surface): The game window</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">window</span></span>)</span>"}, {"fullname": "main.Stage_Select_Screen.window", "modulename": "main", "qualname": "Stage_Select_Screen.window", "kind": "variable", "doc": "<p>The pygame window to be used.</p>\n"}, {"fullname": "main.Stage_Select_Screen.background", "modulename": "main", "qualname": "Stage_Select_Screen.background", "kind": "variable", "doc": "<p>The background image of the stage selection screen.</p>\n"}, {"fullname": "main.Stage_Select_Screen.font", "modulename": "main", "qualname": "Stage_Select_Screen.font", "kind": "variable", "doc": "<p>The font used for rendering text on the stage selection screen.</p>\n"}, {"fullname": "main.Stage_Select_Screen.stage_selection", "modulename": "main", "qualname": "Stage_Select_Screen.stage_selection", "kind": "variable", "doc": "<p>The selected stage.</p>\n"}, {"fullname": "main.Stage_Select_Screen.difficulty_selection", "modulename": "main", "qualname": "Stage_Select_Screen.difficulty_selection", "kind": "variable", "doc": "<p>The selected difficulty level.</p>\n"}, {"fullname": "main.Stage_Select_Screen.hovered_stage", "modulename": "main", "qualname": "Stage_Select_Screen.hovered_stage", "kind": "variable", "doc": "<p>Tracks if mouse is hovering over.</p>\n"}, {"fullname": "main.Stage_Select_Screen.hovered_difficulty", "modulename": "main", "qualname": "Stage_Select_Screen.hovered_difficulty", "kind": "variable", "doc": "<p>Tracks the difficulty level that the mouse is hovering over.</p>\n"}, {"fullname": "main.Stage_Select_Screen.start_button_hovered", "modulename": "main", "qualname": "Stage_Select_Screen.start_button_hovered", "kind": "variable", "doc": "<p>The start button that the mouse can hovering over.</p>\n"}, {"fullname": "main.Stage_Select_Screen.stage1_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.stage1_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the stage 1 button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.stage2_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.stage2_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the stage 2 button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.stage3_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.stage3_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the stage 3 button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.easy_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.easy_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the easy difficulty button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.medium_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.medium_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the medium difficulty button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.hard_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.hard_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the hard difficulty button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.start_button_rect", "modulename": "main", "qualname": "Stage_Select_Screen.start_button_rect", "kind": "variable", "doc": "<p>The rectangle area of the start button.</p>\n"}, {"fullname": "main.Stage_Select_Screen.click_sound", "modulename": "main", "qualname": "Stage_Select_Screen.click_sound", "kind": "variable", "doc": "<p>The sound effect for clicking buttons.</p>\n"}, {"fullname": "main.Stage_Select_Screen.music", "modulename": "main", "qualname": "Stage_Select_Screen.music", "kind": "variable", "doc": "<p>The background music for the stage selection screen.</p>\n"}, {"fullname": "main.Stage_Select_Screen.render", "modulename": "main", "qualname": "Stage_Select_Screen.render", "kind": "function", "doc": "<p>Renders the stage selection screen with the background, stage\nbuttons, difficulty buttons, and start button.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.Stage_Select_Screen.check_for_click", "modulename": "main", "qualname": "Stage_Select_Screen.check_for_click", "kind": "function", "doc": "<p>Checks for mouse click events and returns True if the start\nbutton is clicked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.Stage_Select_Screen.return_selection", "modulename": "main", "qualname": "Stage_Select_Screen.return_selection", "kind": "function", "doc": "<p>Returns the selected stage and difficulty level.</p>\n\n<p>Returns:\n    dict: A dictionary containing the selected stage and difficulty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.Stage_Select_Screen.reset_selection", "modulename": "main", "qualname": "Stage_Select_Screen.reset_selection", "kind": "function", "doc": "<p>Resets the stage and difficulty selection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen", "modulename": "main", "qualname": "MainGameScreen", "kind": "class", "doc": "<p>The game screen which shows the map and handles the generation of\nenemies, towers, and player stats.</p>\n"}, {"fullname": "main.MainGameScreen.__init__", "modulename": "main", "qualname": "MainGameScreen.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">window</span>, </span><span class=\"param\"><span class=\"nb\">map</span>, </span><span class=\"param\"><span class=\"n\">difficulty</span></span>)</span>"}, {"fullname": "main.MainGameScreen.window", "modulename": "main", "qualname": "MainGameScreen.window", "kind": "variable", "doc": "<p>The window for the game.</p>\n"}, {"fullname": "main.MainGameScreen.font", "modulename": "main", "qualname": "MainGameScreen.font", "kind": "variable", "doc": "<p>Sets the font style to be used.</p>\n"}, {"fullname": "main.MainGameScreen.health", "modulename": "main", "qualname": "MainGameScreen.health", "kind": "variable", "doc": "<p>Holds the amount of health the player has remaining.</p>\n"}, {"fullname": "main.MainGameScreen.health_text", "modulename": "main", "qualname": "MainGameScreen.health_text", "kind": "variable", "doc": "<p>Renders the health text so the player knows how much\nhealth they have remaining.</p>\n"}, {"fullname": "main.MainGameScreen.money", "modulename": "main", "qualname": "MainGameScreen.money", "kind": "variable", "doc": "<p>Holds the amount of money the player has</p>\n"}, {"fullname": "main.MainGameScreen.money_text", "modulename": "main", "qualname": "MainGameScreen.money_text", "kind": "variable", "doc": "<p>Renders the money text so the player knows how much money\nthey have remaining.</p>\n"}, {"fullname": "main.MainGameScreen.game_pause_img", "modulename": "main", "qualname": "MainGameScreen.game_pause_img", "kind": "variable", "doc": "<p>The image of the pause button.</p>\n"}, {"fullname": "main.MainGameScreen.wave_pause", "modulename": "main", "qualname": "MainGameScreen.wave_pause", "kind": "variable", "doc": "<p>Sets the wave pause to True when initially ran.</p>\n"}, {"fullname": "main.MainGameScreen.pause", "modulename": "main", "qualname": "MainGameScreen.pause", "kind": "variable", "doc": "<p>Sets pause to False when initially ran.</p>\n"}, {"fullname": "main.MainGameScreen.map", "modulename": "main", "qualname": "MainGameScreen.map", "kind": "variable", "doc": "<p>Sets the map to the map selected by the player.</p>\n"}, {"fullname": "main.MainGameScreen.return_to_stage_select", "modulename": "main", "qualname": "MainGameScreen.return_to_stage_select", "kind": "variable", "doc": "<p>Tracks if the player wants to return to the stage select screen.</p>\n"}, {"fullname": "main.MainGameScreen.projectiles", "modulename": "main", "qualname": "MainGameScreen.projectiles", "kind": "variable", "doc": "<p>A list to hold all the projectiles that have been fired.</p>\n"}, {"fullname": "main.MainGameScreen.explosions", "modulename": "main", "qualname": "MainGameScreen.explosions", "kind": "variable", "doc": "<p>A list to hold all the explosions that have been created.</p>\n"}, {"fullname": "main.MainGameScreen.background_color", "modulename": "main", "qualname": "MainGameScreen.background_color", "kind": "variable", "doc": "<p>Background color for the game.</p>\n"}, {"fullname": "main.MainGameScreen.music", "modulename": "main", "qualname": "MainGameScreen.music", "kind": "variable", "doc": "<p>Tracks the music currently playing.</p>\n"}, {"fullname": "main.MainGameScreen.wave_pause_button", "modulename": "main", "qualname": "MainGameScreen.wave_pause_button", "kind": "variable", "doc": "<p>Creates the pause button as a button to be clicked, \nusing the text_button file.</p>\n"}, {"fullname": "main.MainGameScreen.wave_play_button", "modulename": "main", "qualname": "MainGameScreen.wave_play_button", "kind": "variable", "doc": "<p>Makes the pause button a button to be clicked, using the\ntext_button module</p>\n"}, {"fullname": "main.MainGameScreen.grid_active", "modulename": "main", "qualname": "MainGameScreen.grid_active", "kind": "variable", "doc": "<p>Used to show the grid</p>\n"}, {"fullname": "main.MainGameScreen.grid_size", "modulename": "main", "qualname": "MainGameScreen.grid_size", "kind": "variable", "doc": "<p>Determines the grid size.</p>\n"}, {"fullname": "main.MainGameScreen.tower_size", "modulename": "main", "qualname": "MainGameScreen.tower_size", "kind": "variable", "doc": "<p>Determines the tower size</p>\n"}, {"fullname": "main.MainGameScreen.selected_tower", "modulename": "main", "qualname": "MainGameScreen.selected_tower", "kind": "variable", "doc": "<p>Determines which tower the player has selected.</p>\n"}, {"fullname": "main.MainGameScreen.selected_tower_type", "modulename": "main", "qualname": "MainGameScreen.selected_tower_type", "kind": "variable", "doc": "<p>Determines which tower type the player has selected for placing.</p>\n"}, {"fullname": "main.MainGameScreen.placed_towers", "modulename": "main", "qualname": "MainGameScreen.placed_towers", "kind": "variable", "doc": "<p>A list to hold all the towers that have been placed.</p>\n"}, {"fullname": "main.MainGameScreen.difficulty", "modulename": "main", "qualname": "MainGameScreen.difficulty", "kind": "variable", "doc": "<p>Determines the difficulty of the game.</p>\n"}, {"fullname": "main.MainGameScreen.wave", "modulename": "main", "qualname": "MainGameScreen.wave", "kind": "variable", "doc": "<p>Stores which wave number is currently displayed to the player</p>\n"}, {"fullname": "main.MainGameScreen.wave_text", "modulename": "main", "qualname": "MainGameScreen.wave_text", "kind": "variable", "doc": "<p>Renders the current wave number.</p>\n"}, {"fullname": "main.MainGameScreen.debug", "modulename": "main", "qualname": "MainGameScreen.debug", "kind": "variable", "doc": "<p>Used to help debug.</p>\n"}, {"fullname": "main.MainGameScreen.cursor_text", "modulename": "main", "qualname": "MainGameScreen.cursor_text", "kind": "variable", "doc": "<p>Displays the text for the cursor.</p>\n"}, {"fullname": "main.MainGameScreen.render", "modulename": "main", "qualname": "MainGameScreen.render", "kind": "function", "doc": "<p>Used to render the game and enemies.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.check_for_click", "modulename": "main", "qualname": "MainGameScreen.check_for_click", "kind": "function", "doc": "<p>Checks for mouse click events and returns the result.</p>\n\n<p>Returns:\n    str: The result of the click event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.draw_radius", "modulename": "main", "qualname": "MainGameScreen.draw_radius", "kind": "function", "doc": "<p>Draws a circle around the tower to show the range of the tower.</p>\n\n<p>Args:\n    center (tuple): The center of the circle.\n    radius (int): The radius of the circle.\n    color (tuple): The color of the circle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">center</span>, </span><span class=\"param\"><span class=\"n\">radius</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.render_tower_preview", "modulename": "main", "qualname": "MainGameScreen.render_tower_preview", "kind": "function", "doc": "<p>Renders a preview of the tower that the player is currently</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.place_tower", "modulename": "main", "qualname": "MainGameScreen.place_tower", "kind": "function", "doc": "<p>Places a tower on the map at the given position.</p>\n\n<p>Args:\n    mouse_pos (tuple): The position of the mouse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mouse_pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.check_collision", "modulename": "main", "qualname": "MainGameScreen.check_collision", "kind": "function", "doc": "<p>Checks if the tower can be placed at the given position.</p>\n\n<p>Args:\n    x (int): The x position of the tower.\n    y (int): The y position of the tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.update_attacks", "modulename": "main", "qualname": "MainGameScreen.update_attacks", "kind": "function", "doc": "<p>Updates the attacks of the towers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.update_waves", "modulename": "main", "qualname": "MainGameScreen.update_waves", "kind": "function", "doc": "<p>Checks if the current wave is complete, moves on to the next wave\nprepared once it is.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.setting_screen", "modulename": "main", "qualname": "MainGameScreen.setting_screen", "kind": "function", "doc": "<p>Displays the settings screen. Allows the player to adjust the\nvolume of the game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.pause_screen", "modulename": "main", "qualname": "MainGameScreen.pause_screen", "kind": "function", "doc": "<p>Displays the pause screen. Allows the player to resume the game,\nreturn to the stage select screen, or adjust the settings.</p>\n\n<p>Returns:\n    str: The result of the pause screen if there is one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.remove_health", "modulename": "main", "qualname": "MainGameScreen.remove_health", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">health</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.add_money", "modulename": "main", "qualname": "MainGameScreen.add_money", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">money</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.remove_money", "modulename": "main", "qualname": "MainGameScreen.remove_money", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">money</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.set_health", "modulename": "main", "qualname": "MainGameScreen.set_health", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">health</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.set_money", "modulename": "main", "qualname": "MainGameScreen.set_money", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">money</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.update_cursor_position", "modulename": "main", "qualname": "MainGameScreen.update_cursor_position", "kind": "function", "doc": "<p>Update and render the cursor position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.draw_enemy_path", "modulename": "main", "qualname": "MainGameScreen.draw_enemy_path", "kind": "function", "doc": "<p>Draw the path that the enemies will take.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.MainGameScreen.render_collision_rects", "modulename": "main", "qualname": "MainGameScreen.render_collision_rects", "kind": "function", "doc": "<p>Render the collision rectangles for debugging.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.main", "modulename": "main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy", "modulename": "enemy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "enemy.Enemy", "modulename": "enemy", "qualname": "Enemy", "kind": "class", "doc": "<p>Class that handles the creation of enemies</p>\n"}, {"fullname": "enemy.Enemy.__init__", "modulename": "enemy", "qualname": "Enemy.__init__", "kind": "function", "doc": "<p>Initializes the enemy with the given parameters</p>\n\n<p>Args:\n    e_type (str): The type of enemy\n    path (list): The path the enemy is supposed to follow\n    difficulty (str): The difficulty of the game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">e_type</span>, </span><span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">difficulty</span></span>)</span>"}, {"fullname": "enemy.Enemy.take_damage", "modulename": "enemy", "qualname": "Enemy.take_damage", "kind": "function", "doc": "<p>Takes damage and calls kill_enemy if health hits zero</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">damage</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.kill_enemy", "modulename": "enemy", "qualname": "Enemy.kill_enemy", "kind": "function", "doc": "<p>Kills the enemy and calls reward_resources</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.reward_resources", "modulename": "enemy", "qualname": "Enemy.reward_resources", "kind": "function", "doc": "<p>Gives player resources based on how much the enemy is worth</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.damage_base", "modulename": "enemy", "qualname": "Enemy.damage_base", "kind": "function", "doc": "<p>Damages the base and removes the enemy</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">base</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.is_alive", "modulename": "enemy", "qualname": "Enemy.is_alive", "kind": "function", "doc": "<p>Returns the enemy status</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.get_enemy_type", "modulename": "enemy", "qualname": "Enemy.get_enemy_type", "kind": "function", "doc": "<p>Returns the enemy type</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.get_enemy_health", "modulename": "enemy", "qualname": "Enemy.get_enemy_health", "kind": "function", "doc": "<p>Returns the enemy's health</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.get_enemy_speed", "modulename": "enemy", "qualname": "Enemy.get_enemy_speed", "kind": "function", "doc": "<p>Returns the enemy's speed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.get_enemy_strength", "modulename": "enemy", "qualname": "Enemy.get_enemy_strength", "kind": "function", "doc": "<p>Returns the enemy's strength</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "enemy.Enemy.render", "modulename": "enemy", "qualname": "Enemy.render", "kind": "function", "doc": "<p>Renders the enemy, currently as a circle. Plan to render as\ndifferent shapes based on enemy type</p>\n\n<p>Args:\n    window (pygame.Surface): The game window</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile", "modulename": "projectile", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "projectile.Projectile", "modulename": "projectile", "qualname": "Projectile", "kind": "class", "doc": "<p>Class that handles the creation of projectiles</p>\n"}, {"fullname": "projectile.Projectile.__init__", "modulename": "projectile", "qualname": "Projectile.__init__", "kind": "function", "doc": "<p>Initializes the projectile with the given parameters</p>\n\n<p>Args:\n    position (tuple): The position of the projectile\n    target (Enemy): The target enemy\n    speed (int): The speed of the projectile\n    damage (int): The damage the projectile deals\n    size (int): The size of the projectile\n    image_path (str, optional): The path to the image of the\n        projectile. Defaults to \"game_assests/projectile.png\".</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">position</span>,</span><span class=\"param\">\t<span class=\"n\">target</span>,</span><span class=\"param\">\t<span class=\"n\">speed</span>,</span><span class=\"param\">\t<span class=\"n\">damage</span>,</span><span class=\"param\">\t<span class=\"n\">size</span>,</span><span class=\"param\">\t<span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;game_assests/projectile.png&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">AoE_radius</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">tower</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "projectile.Projectile.move", "modulename": "projectile", "qualname": "Projectile.move", "kind": "function", "doc": "<p>Moves the projectile towards the target enemy. If the projectile\nreaches the target, it deals damage to the enemy and deactivates</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Projectile.apply_splash_damage", "modulename": "projectile", "qualname": "Projectile.apply_splash_damage", "kind": "function", "doc": "<p>Applies splash damage to enemies within the area of effect radius</p>\n\n<p>Args:\n    enemies (list): A list of enemies\n    explosions_list (list): A list of explosions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemies</span>, </span><span class=\"param\"><span class=\"n\">explosions_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Projectile.render", "modulename": "projectile", "qualname": "Projectile.render", "kind": "function", "doc": "<p>Renders the projectile on the game screen.</p>\n\n<p>Args:\n    window (pygame.Surface): The game window</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Projectile.is_active", "modulename": "projectile", "qualname": "Projectile.is_active", "kind": "function", "doc": "<p>Returns the status of the projectile</p>\n\n<p>Returns:\n    bool: True if the projectile is active, False otherwise</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Explosion", "modulename": "projectile", "qualname": "Explosion", "kind": "class", "doc": "<p>Class that handles the creation of explosions, explosions are\npurely cosmetic.</p>\n"}, {"fullname": "projectile.Explosion.__init__", "modulename": "projectile", "qualname": "Explosion.__init__", "kind": "function", "doc": "<p>Initializes the explosion with the given parameters</p>\n\n<p>Args:\n    position (tuple): The position of the explosion\n    max_radius (int): The maximum radius of the explosion\n    duration (int): The duration of the explosion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">position</span>, </span><span class=\"param\"><span class=\"n\">max_radius</span>, </span><span class=\"param\"><span class=\"n\">duration</span></span>)</span>"}, {"fullname": "projectile.Explosion.update", "modulename": "projectile", "qualname": "Explosion.update", "kind": "function", "doc": "<p>Updates the explosion, deactivates it if the duration is reached</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Explosion.render", "modulename": "projectile", "qualname": "Explosion.render", "kind": "function", "doc": "<p>Renders the explosion on the game screen.</p>\n\n<p>Args:\n    window (pygame.Surface): The game window</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "projectile.Explosion.is_active", "modulename": "projectile", "qualname": "Explosion.is_active", "kind": "function", "doc": "<p>Returns the status of the explosion</p>\n\n<p>Returns:\n    bool: True if the explosion is active, False otherwise</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "text_button", "modulename": "text_button", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "text_button.font", "modulename": "text_button", "qualname": "font", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;pygame.font.Font object&gt;"}, {"fullname": "text_button.bg", "modulename": "text_button", "qualname": "bg", "kind": "variable", "doc": "<p></p>\n", "default_value": "(204, 102, 0)"}, {"fullname": "text_button.red", "modulename": "text_button", "qualname": "red", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 0, 0)"}, {"fullname": "text_button.black", "modulename": "text_button", "qualname": "black", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 0, 0)"}, {"fullname": "text_button.white", "modulename": "text_button", "qualname": "white", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 255, 255)"}, {"fullname": "text_button.green", "modulename": "text_button", "qualname": "green", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 180, 0)"}, {"fullname": "text_button.grey", "modulename": "text_button", "qualname": "grey", "kind": "variable", "doc": "<p></p>\n", "default_value": "(100, 100, 100)"}, {"fullname": "text_button.clicked", "modulename": "text_button", "qualname": "clicked", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "text_button.counter", "modulename": "text_button", "qualname": "counter", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "text_button.Button", "modulename": "text_button", "qualname": "Button", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "text_button.Button.__init__", "modulename": "text_button", "qualname": "Button.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">width</span>, </span><span class=\"param\"><span class=\"n\">height</span>, </span><span class=\"param\"><span class=\"n\">text</span>, </span><span class=\"param\"><span class=\"n\">color</span>, </span><span class=\"param\"><span class=\"n\">surface</span></span>)</span>"}, {"fullname": "text_button.Button.hover_col", "modulename": "text_button", "qualname": "Button.hover_col", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 225, 0)"}, {"fullname": "text_button.Button.click_col", "modulename": "text_button", "qualname": "Button.click_col", "kind": "variable", "doc": "<p></p>\n", "default_value": "(0, 150, 0)"}, {"fullname": "text_button.Button.text_col", "modulename": "text_button", "qualname": "Button.text_col", "kind": "variable", "doc": "<p></p>\n", "default_value": "(255, 255, 255)"}, {"fullname": "text_button.Button.width", "modulename": "text_button", "qualname": "Button.width", "kind": "variable", "doc": "<p>The width of the button</p>\n", "default_value": "100"}, {"fullname": "text_button.Button.height", "modulename": "text_button", "qualname": "Button.height", "kind": "variable", "doc": "<p>The height of the button</p>\n", "default_value": "50"}, {"fullname": "text_button.Button.x", "modulename": "text_button", "qualname": "Button.x", "kind": "variable", "doc": "<p>The x position of the button</p>\n"}, {"fullname": "text_button.Button.y", "modulename": "text_button", "qualname": "Button.y", "kind": "variable", "doc": "<p>The y position of the button</p>\n"}, {"fullname": "text_button.Button.text", "modulename": "text_button", "qualname": "Button.text", "kind": "variable", "doc": "<p>The text on the button</p>\n"}, {"fullname": "text_button.Button.button_col", "modulename": "text_button", "qualname": "Button.button_col", "kind": "variable", "doc": "<p>The color of the button</p>\n"}, {"fullname": "text_button.Button.surface", "modulename": "text_button", "qualname": "Button.surface", "kind": "variable", "doc": "<p>The surface the button is drawn on</p>\n"}, {"fullname": "text_button.Button.darken", "modulename": "text_button", "qualname": "Button.darken", "kind": "function", "doc": "<p>returns a color 25 values darker than one that is given</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "text_button.Button.add_transparency", "modulename": "text_button", "qualname": "Button.add_transparency", "kind": "function", "doc": "<p>returns a color with fourth value</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "text_button.Button.draw_button", "modulename": "text_button", "qualname": "Button.draw_button", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower", "modulename": "tower", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tower.Tower", "modulename": "tower", "qualname": "Tower", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "tower.Tower.__init__", "modulename": "tower", "qualname": "Tower.__init__", "kind": "function", "doc": "<p>Initializes the Tower with its primary attributes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">damage</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">shot_cooldown</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">price</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">attack_range</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">attack_pattern</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "tower.Tower.size", "modulename": "tower", "qualname": "Tower.size", "kind": "variable", "doc": "<p>The size of the tower.</p>\n"}, {"fullname": "tower.Tower.projectile_image", "modulename": "tower", "qualname": "Tower.projectile_image", "kind": "variable", "doc": "<p>The image of the projectile.</p>\n"}, {"fullname": "tower.Tower.render", "modulename": "tower", "qualname": "Tower.render", "kind": "function", "doc": "<p>Draws the tower image on the game window at its position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.place", "modulename": "tower", "qualname": "Tower.place", "kind": "function", "doc": "<p>Sets the tower's position on the game map.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_name", "modulename": "tower", "qualname": "Tower.get_name", "kind": "function", "doc": "<p>Returns the name of the tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.set_name", "modulename": "tower", "qualname": "Tower.set_name", "kind": "function", "doc": "<p>Sets the name of the tower, raising an error if the name is\nempty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_damage", "modulename": "tower", "qualname": "Tower.get_damage", "kind": "function", "doc": "<p>Returns the current damage of the tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.set_damage", "modulename": "tower", "qualname": "Tower.set_damage", "kind": "function", "doc": "<p>Sets the tower's damage, ensuring it is positive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">damage</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_range", "modulename": "tower", "qualname": "Tower.get_range", "kind": "function", "doc": "<p>Returns the tower's attack range.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.set_attack_range", "modulename": "tower", "qualname": "Tower.set_attack_range", "kind": "function", "doc": "<p>Sets the tower's attack range, ensuring it is positive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">attack_range</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_price", "modulename": "tower", "qualname": "Tower.get_price", "kind": "function", "doc": "<p>Returns the initial cost of the tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_sell_price", "modulename": "tower", "qualname": "Tower.get_sell_price", "kind": "function", "doc": "<p>Returns the sell price of the tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_upgrade_cost", "modulename": "tower", "qualname": "Tower.get_upgrade_cost", "kind": "function", "doc": "<p>Returns the cost to upgrade the tower to the next level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_enemies_defeated", "modulename": "tower", "qualname": "Tower.get_enemies_defeated", "kind": "function", "doc": "<p>Returns the count of enemies defeated by this tower.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.upgrade_tower", "modulename": "tower", "qualname": "Tower.upgrade_tower", "kind": "function", "doc": "<p>Upgrades the tower's attributes, increasing damage, range, and\nupgrade cost.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.sell_tower", "modulename": "tower", "qualname": "Tower.sell_tower", "kind": "function", "doc": "<p>Displays a message indicating the tower has been sold.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.attack", "modulename": "tower", "qualname": "Tower.attack", "kind": "function", "doc": "<p>Attacks the first enemy within range if the tower is not on\ncooldown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemies</span>, </span><span class=\"param\"><span class=\"n\">projectiles_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.get_stats", "modulename": "tower", "qualname": "Tower.get_stats", "kind": "function", "doc": "<p>Returns a dictionary of the tower's statistics.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.load_sound", "modulename": "tower", "qualname": "Tower.load_sound", "kind": "function", "doc": "<p>Loads the sound effect for the tower.</p>\n\n<p>Args:\n    sound_path (str): The path to the sound effect file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sound_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Tower.update_volume", "modulename": "tower", "qualname": "Tower.update_volume", "kind": "function", "doc": "<p>Updates the sound volume for the tower.</p>\n\n<p>Args:\n    new_volume (float): The new volume level for the sound effect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_volume</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.normal_tower", "modulename": "tower", "qualname": "normal_tower", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Tower"}, {"fullname": "tower.normal_tower.__init__", "modulename": "tower", "qualname": "normal_tower.__init__", "kind": "function", "doc": "<p>Initializes the Normal Tower with specific attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "tower.normal_tower.projectile_image", "modulename": "tower", "qualname": "normal_tower.projectile_image", "kind": "variable", "doc": "<p>The image of the projectile.</p>\n"}, {"fullname": "tower.Archer_Tower", "modulename": "tower", "qualname": "Archer_Tower", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Tower"}, {"fullname": "tower.Archer_Tower.__init__", "modulename": "tower", "qualname": "Archer_Tower.__init__", "kind": "function", "doc": "<p>Initializes the Archer Tower with specific attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "tower.Archer_Tower.projectile_image", "modulename": "tower", "qualname": "Archer_Tower.projectile_image", "kind": "variable", "doc": "<p>The image of the projectile.</p>\n"}, {"fullname": "tower.Archer_Tower.attack", "modulename": "tower", "qualname": "Archer_Tower.attack", "kind": "function", "doc": "<p>Specific implementation for archer_tower's attack logic.</p>\n\n<p>Args:\n    enemies (list): List of Enemy objects.\n    projectiles_list (list): List of Projectile objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemies</span>, </span><span class=\"param\"><span class=\"n\">projectiles_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.Archer_Tower.upgrade_tower", "modulename": "tower", "qualname": "Archer_Tower.upgrade_tower", "kind": "function", "doc": "<p>Upgrades the tower's attributes based on the level, elimination\nrequirements, and upgrade cost.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.cannon_tower", "modulename": "tower", "qualname": "cannon_tower", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Tower"}, {"fullname": "tower.cannon_tower.__init__", "modulename": "tower", "qualname": "cannon_tower.__init__", "kind": "function", "doc": "<p>Initializes the Cannon Tower with specific attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "tower.cannon_tower.projectile_image", "modulename": "tower", "qualname": "cannon_tower.projectile_image", "kind": "variable", "doc": "<p>The image of the projectile.</p>\n"}, {"fullname": "tower.cannon_tower.attack", "modulename": "tower", "qualname": "cannon_tower.attack", "kind": "function", "doc": "<p>Specific implementation for archer_tower's attack logic.</p>\n\n<p>Args:\n    enemies (list): List of Enemy objects.\n    projectiles_list (list): List of Projectile objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemies</span>, </span><span class=\"param\"><span class=\"n\">projectiles_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.cannon_tower.upgrade_tower", "modulename": "tower", "qualname": "cannon_tower.upgrade_tower", "kind": "function", "doc": "<p>Upgrades the tower's attributes based on the level, elimination\nrequirements, and upgrade cost.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.slingshot_tower", "modulename": "tower", "qualname": "slingshot_tower", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "Tower"}, {"fullname": "tower.slingshot_tower.__init__", "modulename": "tower", "qualname": "slingshot_tower.__init__", "kind": "function", "doc": "<p>Initializes the Slingshot Tower with specific attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "tower.slingshot_tower.projectile_image", "modulename": "tower", "qualname": "slingshot_tower.projectile_image", "kind": "variable", "doc": "<p>The image of the projectile.</p>\n"}, {"fullname": "tower.slingshot_tower.attack", "modulename": "tower", "qualname": "slingshot_tower.attack", "kind": "function", "doc": "<p>Specific implementation for slingshot_tower's attack logic.</p>\n\n<p>Args:\n    enemies (list): List of Enemy objects.\n    projectiles_list (list): List of Projectile objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemies</span>, </span><span class=\"param\"><span class=\"n\">projectiles_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tower.slingshot_tower.upgrade_tower", "modulename": "tower", "qualname": "slingshot_tower.upgrade_tower", "kind": "function", "doc": "<p>Upgrades the tower's attributes based on the level, elimination\nrequirements, and upgrade cost.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "waves", "modulename": "waves", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "waves.Wave", "modulename": "waves", "qualname": "Wave", "kind": "class", "doc": "<p>The class used for generating waves</p>\n"}, {"fullname": "waves.Wave.__init__", "modulename": "waves", "qualname": "Wave.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">enemy_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">spawn_timer</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "waves.Wave.spawn_enemy", "modulename": "waves", "qualname": "Wave.spawn_enemy", "kind": "function", "doc": "<p>Function that spawns enemies</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();